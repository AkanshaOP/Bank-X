const m = [
  ["Aztec", "M"],
  ["Codabar", "L"],
  ["Code39", "L"],
  ["Code93", "L"],
  ["Code128", "L"],
  ["DataBar", "L"],
  ["DataBarExpanded", "L"],
  ["DataMatrix", "M"],
  ["EAN-8", "L"],
  ["EAN-13", "L"],
  ["ITF", "L"],
  ["MaxiCode", "M"],
  ["PDF417", "M"],
  ["QRCode", "M"],
  ["UPC-A", "L"],
  ["UPC-E", "L"],
  ["MicroQRCode", "M"],
  ["rMQRCode", "M"],
  ["DXFilmEdge", "L"],
  ["DataBarLimited", "L"]
], O = m.map(([e]) => e), M = O.filter(
  (e, t) => m[t][1] === "L"
), E = O.filter(
  (e, t) => m[t][1] === "M"
);
function u(e) {
  switch (e) {
    case "Linear-Codes":
      return M.reduce((t, r) => t | u(r), 0);
    case "Matrix-Codes":
      return E.reduce((t, r) => t | u(r), 0);
    case "Any":
      return (1 << m.length) - 1;
    case "None":
      return 0;
    default:
      return 1 << O.indexOf(e);
  }
}
function L(e) {
  if (e === 0)
    return "None";
  const t = 31 - Math.clz32(e);
  return O[t];
}
function b(e) {
  return e.reduce((t, r) => t | u(r), 0);
}
const x = [
  "LocalAverage",
  "GlobalHistogram",
  "FixedThreshold",
  "BoolCast"
];
function B(e) {
  return x.indexOf(e);
}
const _ = [
  "Unknown",
  "ASCII",
  "ISO8859_1",
  "ISO8859_2",
  "ISO8859_3",
  "ISO8859_4",
  "ISO8859_5",
  "ISO8859_6",
  "ISO8859_7",
  "ISO8859_8",
  "ISO8859_9",
  "ISO8859_10",
  "ISO8859_11",
  "ISO8859_13",
  "ISO8859_14",
  "ISO8859_15",
  "ISO8859_16",
  "Cp437",
  "Cp1250",
  "Cp1251",
  "Cp1252",
  "Cp1256",
  "Shift_JIS",
  "Big5",
  "GB2312",
  "GB18030",
  "EUC_JP",
  "EUC_KR",
  "UTF16BE",
  /**
   * UnicodeBig [[deprecated]]
   */
  "UTF16BE",
  "UTF8",
  "UTF16LE",
  "UTF32BE",
  "UTF32LE",
  "BINARY"
];
function p(e) {
  return e === "UnicodeBig" ? _.indexOf("UTF16BE") : _.indexOf(e);
}
const w = [
  "Text",
  "Binary",
  "Mixed",
  "GS1",
  "ISO15434",
  "UnknownECI"
];
function F(e) {
  return w[e];
}
const T = ["Ignore", "Read", "Require"];
function A(e) {
  return T.indexOf(e);
}
const U = ["Plain", "ECI", "HRI", "Hex", "Escaped"];
function R(e) {
  return U.indexOf(e);
}
const l = {
  formats: [],
  tryHarder: !0,
  tryRotate: !0,
  tryInvert: !0,
  tryDownscale: !0,
  tryDenoise: !1,
  binarizer: "LocalAverage",
  isPure: !1,
  downscaleFactor: 3,
  downscaleThreshold: 500,
  minLineCount: 2,
  maxNumberOfSymbols: 255,
  tryCode39ExtendedMode: !0,
  returnErrors: !1,
  eanAddOnSymbol: "Ignore",
  textMode: "HRI",
  characterSet: "Unknown"
};
function y(e) {
  return {
    ...e,
    formats: b(e.formats),
    binarizer: B(e.binarizer),
    eanAddOnSymbol: A(e.eanAddOnSymbol),
    textMode: R(e.textMode),
    characterSet: p(e.characterSet)
  };
}
const I = {
  format: "QRCode",
  readerInit: !1,
  forceSquareDataMatrix: !1,
  ecLevel: "",
  scale: 0,
  sizeHint: 0,
  rotate: 0,
  withHRT: !1,
  withQuietZones: !0
};
function P(e) {
  return {
    ...e,
    format: u(e.format)
  };
}
function W(e) {
  return {
    ...e,
    format: L(e.format),
    contentType: F(e.contentType),
    eccLevel: e.ecLevel
  };
}
function S(e) {
  var t;
  return {
    ...e,
    image: (t = e.image && new Blob([new Uint8Array(e.image)], {
      type: "image/png"
    })) != null ? t : null
  };
}
const H = "2.0.1", N = "7be9048e8176fba4f6ffa3dcf528282c6b0151a9", z = {
  locateFile: (e, t) => {
    const r = e.match(/_(.+?)\.wasm$/);
    return r ? `https://fastly.jsdelivr.net/npm/zxing-wasm@2.0.1/dist/${r[1]}/${e}` : t + e;
  }
}, f = /* @__PURE__ */ new WeakMap();
function D(e, t) {
  return Object.is(e, t) || Object.keys(e).length === Object.keys(t).length && Object.keys(e).every(
    (r) => Object.prototype.hasOwnProperty.call(t, r) && e[r] === t[r]
  );
}
function h(e, {
  overrides: t,
  equalityFn: r = D,
  fireImmediately: i = !1
} = {}) {
  var s;
  const [o, a] = (s = f.get(e)) != null ? s : [z], n = t != null ? t : o;
  let c;
  if (i) {
    if (a && (c = r(o, n)))
      return a;
    const d = e({
      ...n
    });
    return f.set(e, [n, d]), d;
  }
  (c != null ? c : r(o, n)) || f.set(e, [n]);
}
function Z(e) {
  f.delete(e);
}
async function v(e, t, r = l) {
  const i = {
    ...l,
    ...r
  }, o = await h(e, {
    fireImmediately: !0
  });
  let a, n;
  if ("size" in t) {
    const { size: s } = t, d = new Uint8Array(await t.arrayBuffer());
    n = o._malloc(s), o.HEAPU8.set(d, n), a = o.readBarcodesFromImage(
      n,
      s,
      y(i)
    );
  } else {
    const {
      data: s,
      data: { byteLength: d },
      width: C,
      height: g
    } = t;
    n = o._malloc(d), o.HEAPU8.set(s, n), a = o.readBarcodesFromPixmap(
      n,
      C,
      g,
      y(i)
    );
  }
  o._free(n);
  const c = [];
  for (let s = 0; s < a.size(); ++s)
    c.push(
      W(a.get(s))
    );
  return c;
}
async function X(e, t, r = I) {
  const i = {
    ...I,
    ...r
  }, o = P(
    i
  ), a = await h(e, {
    fireImmediately: !0
  });
  if (typeof t == "string")
    return S(
      a.writeBarcodeFromText(t, o)
    );
  const { byteLength: n } = t, c = a._malloc(n);
  a.HEAPU8.set(t, c);
  const s = a.writeBarcodeFromBytes(
    c,
    n,
    o
  );
  return a._free(c), S(s);
}
const j = {
  ...l,
  formats: [...l.formats]
}, G = { ...I };
export {
  H as Z,
  Z as a,
  N as b,
  O as c,
  j as d,
  x as e,
  _ as f,
  w as g,
  T as h,
  G as i,
  M as l,
  E as m,
  h as p,
  v as r,
  U as t,
  X as w
};
